#!/usr/bin/env bash
# bin/compile <build-dir> <cache-dir>

set -eo pipefail

# debug
# set -x

BUILD_DIR="$1"
CACHE_DIR="$2"
BUILDPACK_NAME="vips"

# Set vips version if not already set
export VIPS_VERSION=${VIPS_VERSION:-8.10.5}
### Prereqs are now installed via apt buildpack
# export WEBP_VERSION=0.6.0
# export ORC_VERSION=0.4.18
# export TIFF_VERSION=4.0.3
# export GETTEXT_VERSION=0.19.1
# export SVG_VERSION=2.40.15
# export GIF_VERSION=5.1.4
export OUT_DIR="" #${OUT_DIR:-$(pwd)}
# export BUILD_PATH=/tmp
export OUT_PATH=$OUT_DIR/app/vendor/vips
export PKG_CONFIG_PATH=$OUT_PATH/lib/pkgconfig:$PKG_CONFIG_PATH
export PATH=$OUT_PATH/bin:$PATH

# rust and cargo env vars
export CARGO_HOME=$OUT_DIR/app/vendor/.cargo
export RUSTUP_HOME=$OUT_DIR/app/vendor/.rust
export PATH=$OUT_DIR/app/vendor/.cargo/bin:$PATH

# Remove out path if already exists
rm -Rf $OUT_PATH

buildpack_path=$(cd $(dirname $(dirname $0)); pwd)

source ${buildpack_path}/lib/helper_funcs.sh

# echo "Vendoring binaries" | arrow

# vendor "wget https://www.m-kast.com/files/libvips-8.7.0-ubuntu18.04.tgz" "$BUILD_DIR/vendor/vips" # FIXME: unharcode version

############
# apt deps #
############

# back to the apt buildpack we go...

# function install_apt_deps {
#   # apt install everything in the Aptfile, filtering out comments and :repo:'s
#   # Went this route because I couldn't figure out how to get this buildpack to depend on the apt buildpack and work that way
#   cat ${buildpack_path}/Aptfile | grep -v -s -e '^#' | grep -v -s -e "^:repo:" | xargs apt install -y
# }

############
#   RUST   #
############

function get_rust {
  echo "Getting rust" | arrow
  echo "CARGO_HOME=$CARGO_HOME"
  echo "RUSTUP_HOME=$RUSTUP_HOME"
  curl https://sh.rustup.rs -sSf | sh -s -- -y
  source $CARGO_HOME/env
  # export PATH="$HOME/.cargo/bin:$PATH"
}

###############
#     VIPS    #
###############
# first argument is the build path, then the cache path, then the vips version
function get_and_build_vips {
    build_path="$1"
    cache_path="$2"
    local version="$3"
    vipsdirname="vips-$version"
    # Download vips source if it's not already there, or if it's forced
    # force_fetch=true # for debugging
    if [ "${force_fetch}" = true ]; then
      echo "Forcing redownload of vips"
    fi
    if [ "${force_fetch}" = true ] || [ ! -d "${cache_path}/${vipsdirname}" ]; then
      clean_vips_downloads $cache_path
      vips_changed=true
      pushd $cache_path
      echo "Downloading vips source via git clone depth 1 with branch/tag v$version" | arrow
      git clone --depth 1 -b "v$version" git://github.com/libvips/libvips.git ${vipsdirname}
      # echo "Downloading vips source from github.com/libvips/libvips/releases/download/v$VIPS_VERSION/vips-$VIPS_VERSION.tar.gz ..."
      # curl -L https://github.com/libvips/libvips/releases/download/v$VIPS_VERSION/vips-$VIPS_VERSION.tar.gz -o $vipsdirname.tar.gz
      # unzip
      # tar -xvf $vipsdirname.tar.gz
      popd #$cache_path
    else
      output_section "Using cached ${vipsdirname}"
    fi
    # Get into vips folder
    pushd $cache_path
    pushd $vipsdirname
    # Configure build and output everything
    echo "Configuring vips" | arrow
    cp /usr/share/gtk-doc/data/gtk-doc.make doc/
    # the || : is like an "or true", forces find to not exitcode 1 if there's a permissions error
    # gtkdocmake=$(find / -name gtk-doc.make -print -quit 2>/dev/null || : )
    # echo "gtkdocmake is at: $gtkdocmake"
    # cp /tmp/build/.apt/usr/share/gtk-doc/data/gtk-doc.make doc/ || :
    # touch doc/gtk-doc.make
    autoreconf -fvi || :
    # neuter gtkdocize which won't fucking install to PATH for some reason despite using the right apt dependency
    # also, we don't need docs
    # also, this didn't work inside autogen.sh for some strange reason
    # gtkdocize() { return 0; }
    # HERE IS GTKDOCIZE: edit: it's completely missing.
    # echo $(find_missing_executable gtkdocize)
    ./autogen.sh --prefix $OUT_PATH --disable-gtk-doc --disable-gtk-doc-html --disable-gtk-doc-pdf --without-magick --disable-dependency-tracking --disable-static --disable-debug
    # ./configure --help  # remove or comment me out; shows possible options
    # ./configure --prefix $OUT_PATH --enable-shared --disable-static --disable-dependency-tracking --disable-debug --disable-introspection --without-magick --without-analyze --without-radiance
    # --with-giflib-includes=$OUT_PATH/include \
    # --with-giflib-libraries=$OUT_PATH/lib
    # Make
    echo "Making vips" | arrow
    make
    # install vips
    echo "Installing vips" | arrow
    make install
    ldconfig || :
    popd # $vipsdirname
    popd # cache_path
}

# install_apt_deps
get_rust
get_and_build_vips $BUILD_DIR $CACHE_DIR $VIPS_VERSION

# echo "Tweaking glib include paths" | arrow

# export CPPPATH="$BUILD_DIR/vendor/vips/include/glib-2.0:$BUILD_DIR/vendor/vips/lib/glib-2.0/include:$CPPPATH"
# export CPATH="$BUILD_DIR/vendor/vips/include/glib-2.0:$BUILD_DIR/vendor/vips/lib/glib-2.0/include:$CPATH"

# echo "Configuring build environment" | arrow

# cat <<EOF > export
# export PATH="$PATH:\$PATH"
# export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:$LD_LIBRARY_PATH"
# export LIBRARY_PATH="\$LIBRARY_PATH:$LIBRARY_PATH"
# export PKG_CONFIG_PATH="\$PKG_CONFIG_PATH:$PKG_CONFIG_PATH"
# export CPPPATH="\$CPPPATH:$CPPPATH"
# export CPATH="\$CPATH:$CPATH"
# EOF

# echo "Building runtime environment" | arrow
# mkdir -p $BUILD_DIR/.profile.d

# cat <<EOF > $BUILD_DIR/.profile.d/$BUILDPACK_NAME.sh
# export PATH="${PATH//$BUILD_DIR//app}:\$PATH"
# export LD_LIBRARY_PATH="\$LD_LIBRARY_PATH:${LD_LIBRARY_PATH//$BUILD_DIR//app}"
# export LIBRARY_PATH="\$LIBRARY_PATH:${LIBRARY_PATH//$BUILD_DIR//app}"
# export PKG_CONFIG_PATH="\$PKG_CONFIG_PATH:${PKG_CONFIG_PATH//$BUILD_DIR//app}"
# export CPPPATH="\$CPPPATH:${CPPPATH//$BUILD_DIR//app}"
# export CPATH="\$CPATH:${CPATH//$BUILD_DIR//app}"
# EOF

###############
#    Output   #
###############

# Get into output path
pushd $OUT_PATH
# Clean useless files
rm -rf share/{doc,gtk-doc}
popd
